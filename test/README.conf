
General

  The configuration files under 'conf' are expressed in YAML. They are parsed by
  test-suite code and instantiated as hash and array containers. Inside Run
  objects and the methods they call, an environment object is available whose
  "build" and "run" members expose the contents of the build and run configs,
  respectively.

  - Build configs are represented as the YAML equivalents of nested hashed and
    contain the information necessary to construct commands for performing a
    build via the external build-automation system. Their content, than, depends
    on the requirements of that system and the interface to it defined in the
    test-suite core driver and library. Like run configs (see below), build
    configs can be composed via the "extends" key.

  - Run configs are represented as the YAML equivalents of nested hashed and
    contain the information necessary to prep, configure, execute, and verify a
    run, to associate it with a baseline image, etc. Config contents will depend
    on the model and platform, but several top-level keys are reserved and
    required: The "baseline" key specifies the name of the baseline image into
    which this run's output should (potentially) be copied, or against which
    this run's output should be compared. Runs whose output is expected to be
    identical should share a common "baseline" value. To exclude a run from
    baseline participation, specify the baseline value "none". The "build" key
    specifies the name of the build (i.e. the filename of a build config) to use
    for this run. The "extends" key specifies the name of a run config from
    which the current one should inherit and (potentially) override. Rrecursion
    is supported, but loops are fatal errors. The "profile" key specifies the
    name of a Ruby module (defined in profiles.rb) that may be used to alias
    required method names to platform-specific versions in library.rb. Due to
    Ruby naming restrictions, "profile" values must begin with an upper-case
    letter.

  - Suite configs are represented as the YAML equivalent of an array-of-arrays.
    Each outer array element names a group of runs expected to produce identical
    output, whose output will be compared together for bitwise identity. Inner
    array elements are the names of runs (i.e. filenames of run configs).

  - Running the test suite with arguments 'show suite <suite_name>' or
    'show run <run_name>' will show the complete form of a suite or run config,
    respectively.

Quoting Rules for Fortran Namelists

  If namelist editing is to be performed, please note that, in general, values
  recognized as strings in YAML are instantiated as Ruby String objects. Some
  caveats:

  - YAML casts some unquoted strings to primitive data types. For example, the
    unquoted word 'yes' will be instantiated as a Ruby 'true' boolean. There are
    a number of similar cases. When casting yields unwated behavior, explicitly
    quote the problematic value in the config.

  - The YAML library would normally print Ruby string objects without enclosing
    quotes, whether or not they are quoted in the config. For example, values
    abc, 'abc' and "abc" would all be printed without quotes. The test-suite
    adds single quotes around all String values when writing Fortran namelists
    so that, for the previous example, all three values would appear as 'abc'
    (i.e. in single quotes). Sometimes this isn't what's needed. For example,
    the Fortran primitive value .true. will be recognized by YAML as a string,
    but must appear unquoted in a namelist. To support this, a value may be
    preceded by the tag !unquoted in a YAML config to prevent automatic quoting
    of that value. For example, the YAML entries

      gribout: !unquoted  .true.
      gribout: !unquoted '.true.'
      gribout: !unquoted ".true."

    would all result in the Fortran namelist entry

      gribout=.true.

  - Values recognized as numbers will be written without quotes. If quotes are
    desired, explicitly quote the value in the config so that it is recognized
    as a string.

